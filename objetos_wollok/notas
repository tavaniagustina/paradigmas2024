1. Métodos que tienen efectos de lado (usando llaves {})
Cuando un método modifica el estado del objeto o realiza una acción, como cambiar una propiedad, ejecutar operaciones que no necesariamente devuelven un valor o interactuar con otros objetos, se utiliza la forma con llaves ({}).

method name() { } -> Tiene efecto (effect) de lado -> method aumentar(aumento) { precio += aumento }

2. Métodos que retornan un valor (usando =)
Cuando un método solamente devuelve un valor basado en los atributos del objeto o en algún cálculo, sin modificar el estado del objeto ni tener efectos de lado, se utiliza la forma con =.

method obtenerPrecioConImpuesto() = precio * 1.21  // Solo retorna un valor calculado

//--------------------------

method name() = -> Retorna (return) un valor

Mensaje es lo que el objeto emisor le envía como orden al receptor. El emisor sólo pide que se resuelva.
El receptor recibe el mensaje y se ejecuta un método (porción de código).

La estrategia que utilizan los lenguajes para resolver dónde está el código de un método al enviar un mensaje recibe el nombre de method lookup. 

:rr -> te recarga todos los mensajes que ya mandaste en esa sesion

size() -> puede ser para tipo lista, collection, set, string

var -> puedo cambiar el valor

const -> referencia a un objeto fijo, no podes cambiar esa referencia, pero si podes cambiar los elementos que le pertenecen, por ej. una lista.

Setter -> setteo un valor a una variable, no "retorna" nada, tiene efecto colateral, me cambia el valor del parametro -> {} (sin =)

Getter ->

var property -> genera el getter y el setter

const property -> wollok automáticamente generará un getter para esa propiedad, pero no un setter, ya que su valor no lo puedo cambiar después de ser asignado.

polimorfismo -> para q exista debe haber por lo menos tres objetos que entiendan el mismo mensaje 

LISTA -> a la lista no hace falta ponerle (), sino que con materiasQueEstudia.size() ya es suficiente 

Métodos: Pueden ser de acción (cambia una variable, hay una referencia a un objeto) o de pregunta (ej: 1.max(4) -> 4, no tiene efecto)

Referencia: Constante (inmutable, siempre apunta al mismo objeto) o variable 

Funciones anónimas (tipo lambda): El bloque no se evalúa en el momento, uno decide cuando ejecutarlo

    > const bloque = { (-4).abs() } 
    > bloque.apply() 
    > 4

    > const otroBloque = { numero => numero.abs() }
    > otroBloque.apply(-1)
    > 1

    > const suma = { numero, otroNumero => numero + otroNumero }
    > suma.apply(2, 3)  // la aridad del bloque es 2
    > 5

    > const sumaCurrificada = { numero => { otroNumero => numero + otroNumero } } 
    > sumaCurrificada.apply(2).apply(3)  // cada bloque es de aridad 1
    > 5
    
    > [1, 2, 3].filter( {numero => numero > 1} )
    > [2, 3]

Set: No tiene orden y no admite repetidos -> #{ }

List: Tiene orden y admite repetidos -> [ ]

    > lista.filter( {objeto => objeto.atributo() > 2})
    > [x]

    > lista.remove(y)
    
    > lista.add(y)

    > lista.map( { objeto => objeto.atributo() })
    > [3, 1]

method lookup -> 

polimorfismo -> como minimo necesito tres objetos para q ocurra. Uno lo manda y los otros dos lo tienen que q entender

objetos -> tienen un comportamiento especifico, particular

class -> comportamiento general para todos los objetos

en el tp no usar herencia



